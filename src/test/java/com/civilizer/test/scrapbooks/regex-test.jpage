Pattern p = Pattern.compile("('([^']|'\\w)+')|(\"[^\"]+\")|(\\S+)");
String src = " '...' simple-word \"quoted\" 'as is' word* _word*";
Pattern p = Pattern.compile("(\\b(tag|anytag|title|anytitle|text|anytext|any)\\b)?:");String src = "anytag: tag0 tag1 : all text: word0 word1 \" any: \" anytitle: title0 title1";Pattern p = Pattern.compile("\\bword0 word1\\b");Pattern p = Pattern.compile("-\\bword0\\b");String src = "anytag: tag0 tag1 : all text: -word0 word1 \" any: \" anytitle: title0 title1";Pattern p = Pattern.compile("wrap\\b");String src = ".unwrap()";Pattern p = Pattern.compile("^#([\\d\\s]+)$");String src = "#1 3 7 11";Pattern p = Pattern.compile("[\u00E0\\u3000]");String src = "hello à　";Pattern p = Pattern.compile("\\{\\{\\[file\\](\\s*)3(\\s*)\\}\\}");String src = " {{[file]3 }} ";Matcher m = p.matcher(src);boolean found = false;System.out.println("*********");System.out.println("input source string:" + src);System.out.println("*********");while (m.find()) {    System.out.format("I found the text \"%s\" starting at index %d and ending at index %d.%n"        , m.group()        , m.start()        , m.end()    );        found = true;        // [PITFALL ALERT!] m.groupCount() returns the number of sub groups    // a trivial iterating like *for (int i=1; i<m.groupCount(); ++i)* WON'T WORK!    for (int i=1; i<=m.groupCount(); ++i) {    	System.out.format(    		"Sub group %d: %s%n"            , i            , m.group(i)        );    }}if (!found){    System.out.format("No match found.%n");}