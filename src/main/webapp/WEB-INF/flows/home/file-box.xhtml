<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
    xmlns:c="http://java.sun.com/jsp/jstl/core"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:p="http://primefaces.org/ui">
    
<script>
//<![CDATA[
var fileSeparator = ("#{ systemProperties['file.separator'] }");

$(document).ready(function() {
	processFileClasses();
	
	$("#file-box-form\\:file-selector").change(function () {
	    var fileName = $(this).val();
	    if (fileName) {
	    	// make the upload button visible only when we have a file to upload
	    	$("#file-box-form\\:upload-button").css("visibility", "visible").effect("shake");
	    	
	    	var holderForDstId = $("#file-box-form\\:id-placeholder-for-dst-node");
	    	var dest = $("#file-path-tree .fa-upload");
	    	var path;
	    	if (dest.length > 0) {
	    		// a destination place has been specified
	    		path = dest.attr("_fp");
	    		holderForDstId.val(dest.attr("_id"));
	    		console.log(path);
	    	}
	    	else {
	    		// no destination place has been specified. just send the file in the root directory
	    		path = fileSeparator;
	    		holderForDstId.val(0);
	    	}
	    	
	    	$("#upload-destination-info").html("&nbsp;&nbsp;<span class='fa fa-folder-open' style='color:gold; font-weight:bold'>" + path + "</span>");
	    }
	});
	
	$(".each-file").click(function () {
		$(".each-file").removeClass("fa-upload fb-target-dir");
		var $this = $(this);
		if ($this.hasClass("fb-dir")) {
			$this.addClass("fa-upload fb-target-dir");
		}
	});
	
	$(".each-file, #file-path-tree").bind("contextmenu", function(event) {
    	var menu = $("#file-context-menu");
    	menu.css({ left:event.pageX, top:event.pageY }).show();
    	var target = $(event.target);
    	if (target.attr("_isFolder") === "false") {
    		menu.find("#file-box-form\\:new-folder").hide();
    	}
    	else {
    		menu.find("#file-box-form\\:new-folder").show();
    	}
    	if (isNaN(parseInt(target.attr("_id")))) {
    		// the menu has no specified target;
    		// the target will be the root folder
    		menu.find("#file-box-form\\:rename").hide();
    		menu.find("#file-box-form\\:move").hide();
    		menu.find("#file-box-form\\:delete").hide();
    	}
    	else {
    		// the menu has a target file or folder
    		menu.find("#file-box-form\\:rename").show();
    		menu.find("#file-box-form\\:move").show();
    		menu.find("#file-box-form\\:delete").show();
    	}
    	menu.data("target-file", target);
    	event.preventDefault();
    });

    $(document).bind("click", function(event) {
    	$("#file-context-menu").hide();
    });
}); // end of $(document).ready()

function processFileClasses() {
	$(".-cvz-file").each(function () {
		var $this = $(this);
		var filePath = $this.text();
		var fileName = filePath.slice(filePath.lastIndexOf(fileSeparator) + 1);
		filePath = "${request.contextPath}/app/file-box" + filePath;
		$this.text("").append("<img title="+fileName+" src="+filePath+">");
	});
}

function showMoveFileDialog() {
	var dlg = PF('moveFileDlg');
    dlg.show();
    
    var menu = $("#file-context-menu");
	var target = menu.data("target-file");
	var srcId = target.attr("_id");
	$("#file-box-form\\:id-placeholder-for-src-node").val(srcId);
	var srcPath = target.attr("_fp");
	$("#file-box-form\\:src-path").text(srcPath);
	var srcName = target.text().trim();
	var srcIsFolder = target.attr("_isFolder");
	var dstOutput = $("#file-box-form\\:dst-path");
	dstOutput.text("#{msg['select_destination']}").removeClass("fa-close").css({color:"aqua"});
	var treeNodes = $("#file-box-form\\:folder-tree .each-file");
	treeNodes.removeClass("fa-upload fb-target-dir");
	var btn = $("#file-box-form\\:ok");
	btn.prop("disabled", false);

	$("#file-box-form\\:folder-tree .each-file").click(function () {
		var $this = $(this);
		treeNodes.removeClass("fa-upload fb-target-dir");
		var fp = $this.attr("_fp");
		if (fp === undefined)
			fp = "";
		var dstPath = fp + fileSeparator + srcName;
		console.log($this.attr("_fp"));
		console.log(dstPath);
		var canMove = (srcPath !== dstPath) && (!srcIsFolder || dstPath.indexOf(srcPath) != 0);
		if (canMove) {
			var dstId = $this.attr("_id");
			$("#file-box-form\\:id-placeholder-for-dst-node").val(dstId);
			$this.addClass("fa-upload fb-target-dir");
			$("#file-box-form\\:dst-path").text(dstPath);
			dstOutput.removeClass("fa-close").css({color:"aqua"});
			btn.prop("disabled", false);
		}
		else {
			dstOutput.text(" #{msg['cant_move']}");
			dstOutput.addClass("fa-close").css({color:"red"});
			btn.prop("disabled", true);
		}
	});
}

function showRenameFileDialog() {
    var menu = $("#file-context-menu");
	var target = menu.data("target-file");
	var srcId = target.attr("_id");
    $("#file-box-form\\:id-placeholder-for-src-node").val(srcId);
    
	var curName = target.text().trim();
    var input = $("#file-box-form\\:rename-file-dlg-name-input");
    input.val(curName);
    input.focus(function() {
    	$(this).select();
    });
    
    var dlg = PF('renameFileDlg');
    dlg.show();
    dlg.jq.find(".ui-dialog-title").text("#{msg['label_rename']}");
}

function showNewDirectoryDialog(target) {
    var menu = $("#file-context-menu");
	var target = menu.data("target-file");
	
    // As a rule, we should send the id after encoding it like so:
    //   -( (original-value) + 1 )
    // see also MainController.renameFile()
	var id = target.attr("_id");
    if (isNaN(id)) {
    	// In this case, we make a new directory at the root level
    	id = -1;
    }
    else {
    	id = -(++id);
    }
	$("#file-box-form\\:id-placeholder-for-src-node").val(id);
	
    $("#file-box-form\\:rename-file-dlg-name-input").val("new-directory");
    
    var dlg = PF('renameFileDlg');
    dlg.show();
    dlg.jq.find("input").focus(function() {
    	$(this).select();
    });
    dlg.jq.find(".ui-dialog-title").text("#{msg['label_new_folder']}");
}
//]]>
</script>

<div>
    <span id="file-box-title" class="fa fa-file" >&nbsp;&nbsp;#{msg['label_filebox']}</span>
</div>

<h:form id="file-box-form" enctype="multipart/form-data">
	<p:dialog header="" width="300px" modal="true" closeOnEscape="true" closhowEffect="fade" widgetVar="renameFileDlg" position="center" draggable="true" resizable="false">
        <h:outputLabel for="rename-file-dlg-name-input" value="#{msg['label_name']} "/>
        <p:inputText style="min-width:200px" id="rename-file-dlg-name-input" value="#{fileListBean.fileName}"/>
        <br/><br/>
        <p:commandButton action="rename-file" value="#{msg['label_ok']}" icon="ui-icon-check"/>
    </p:dialog>

	<p:dialog id="move-file-dialog" header="#{msg['label_move']}" width="300px" modal="true" closeOnEscape="true" showEffect="fade" widgetVar="moveFileDlg" position="center" draggable="true" resizable="false">
        <p:tree id="folder-tree" value="#{fileListBean.folderTree.root}" var="folderPathBean" style="width:100%">
            <p:treeNode dynamic="true">
                <span class="each-file fa #{folderPathBean.getCssClassName()}" _id="#{folderPathBean.id}" _fp="#{folderPathBean.fullPath}">
                	#{folderPathBean.getName()}
             	</span>
            </p:treeNode>
        </p:tree>
        <br/><h:outputText styleClass="fa" id="dst-path" value=""/><br/>
        <br/><span class="fa fa-arrow-circle-up fa-2x"></span><br/>
        <br/><h:outputText id="src-path" value=""/><br/>
        <p:commandButton id="ok" action="move-file" value="#{msg['label_ok']}" icon="ui-icon-check"/>
    </p:dialog>
    
    <div id="file-context-menu" style="display:none; z-index:5000; position:absolute;">
	    <p:menu>
            <p:menuitem id="new-folder" styleClass="fa" onclick="showNewDirectoryDialog()" value="&#xf07c;+ #{msg['label_new_folder']}"/>
            <p:menuitem id="rename"  styleClass="fa" onclick="showRenameFileDialog()" value="&#xf040; #{msg['label_rename']}"/>
            <p:menuitem id="move"  styleClass="fa" oncomplete="showMoveFileDialog()" value="&#xf0c5; #{msg['label_move']}"
            	update="folder-tree" actionListener="#{fileListBean.folderTree.populateNodes(null)}"/>
            <p:menuitem id="delete" styleClass="fa" onclick="confirmDeletingFile()" value="&#xf1f8; #{msg['label_delete']}"/>
	    </p:menu>
    </div>
    
    <h:inputHidden id="id-placeholder-for-src-node" value="#{fileListBean.srcNodeId}"/>
    <h:inputHidden id="id-placeholder-for-dst-node" value="#{fileListBean.dstNodeId}"/>
    
	<p:panel id="file-box-panel">

		<!-- [TODO] externalize any other configurable parameters like this file size limit value -->
		<p:fileUpload id="file-selector" value="#{fileUploadBean.file}" mode="simple" skinSimple="true" sizeLimit="#{cfg['file.upload.size.limit']}" style="width:200px"/>
		<br/>
		
		<p:commandLink id="upload-button" action="upload-file" ajax="false" title="#{msg['label_upload_file']}">
			<span class="fa fa-2x fa-upload button-link"></span>
		</p:commandLink>
		
		<span id="upload-destination-info"></span>
		
		<div id="file-path-tree">
            <p:tree value="#{fileListBean.filePathTree.root}" var="filePathBean" style="width:100%">
                <p:treeNode>
                    <span class="each-file fa #{filePathBean.getCssClassName()}" _id="#{filePathBean.id}" _fp="#{filePathBean.fullPath}" _isFolder="#{filePathBean.isFolder()}">
                    	#{filePathBean.getName()}
	                </span>
                </p:treeNode>
            </p:tree>
        </div>
        <br/>
	</p:panel>
</h:form>

</ui:composition>