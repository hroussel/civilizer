<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:c="http://java.sun.com/jsp/jstl/core" 
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:p="http://primefaces.org/ui"
	template="/WEB-INF/layouts/standard.xhtml">
                
<ui:define name="entry-point-scripts">
<script>
//<![CDATA[
$(document).ready(function() {
    $("#fragment-group").on("mouseenter", ".each-fragment-container", function() {
   		$(this).find(".fragment-menu").show();
   	});
    
    $("#fragment-group").on("mouseleave", ".each-fragment-container", function() {
   		$(this).find(".fragment-menu").hide();
   	});
    
    $(".fragment-content").each(function(){
    	var $this = $(this);
        var content = $this.text();
   	    $this.html(parseMarkdown(content));
   	});
    
    function triggerFragmentOverlay(event) {
    	var href=$(this).attr('href');
        $.get(href, "", populateFragmentOverlay);
        
        return false; // stop the link
    }
    
    $("#fragment-group").find(".fragment-overlay-trigger").on("mouseenter", triggerFragmentOverlay);
    $("#bookmark-form\\:bookmark-panel").find(".fragment-overlay-trigger").on("mouseenter", triggerFragmentOverlay);
    
    function generateClickHandler(panelId) {
    	var fragmentCount = $("#fragment-panel-" + panelId + " .each-fragment-container").length;
        if (fragmentCount > 0) {
            var fragmentCheckboxSlaves = [];    
            
            for (var j=0; j<fragmentCount; ++j) {
                var cb = PF("fragmentCheckboxSlave" + panelId + "_" + j);
                fragmentCheckboxSlaves.push(cb);
            }
        
            var fragmentCheckboxMaster = PF("fragmentCheckboxMaster" + panelId);
            
            // Align the master checkbox with its slaves in horizontal position
            fragmentCheckboxMaster.jq.offset({ left:fragmentCheckboxSlaves[0].jq.offset().left });
            
            return function (e) {
                if (fragmentCheckboxMaster.isChecked()) {
                    for (var i=0; i<fragmentCount; ++i) {
                        fragmentCheckboxSlaves[i].check();
                    }
                }
                else {
                    for (var i=0; i<fragmentCount; ++i) {
                        fragmentCheckboxSlaves[i].uncheck();
                    }
                }
            }
        }
    }
    
    var fragmentCheckboxMaster;
    var panelId;
    
    panelId = 0;
    fragmentCheckboxMaster = PF("fragmentCheckboxMaster" + panelId)
    if (fragmentCheckboxMaster) {
    	fragmentCheckboxMaster.jq.click(generateClickHandler(panelId));
    }
    panelId = 1;
    fragmentCheckboxMaster = PF("fragmentCheckboxMaster" + panelId)
    if (fragmentCheckboxMaster) {
    	fragmentCheckboxMaster.jq.click(generateClickHandler(panelId));
    }
    panelId = 2;
    fragmentCheckboxMaster = PF("fragmentCheckboxMaster" + panelId)
    if (fragmentCheckboxMaster) {
    	fragmentCheckboxMaster.jq.click(generateClickHandler(panelId));
    }
    
    setUpDragAndDrop();
}); // end of $(document).ready()

function setUpDragAndDrop() {
	var fragmentDeletable = [
	   Boolean('#{fragmentListBeans[0].panelContextBean.fragmentDeletable}' == 'true'),
	   Boolean('#{fragmentListBeans[1].panelContextBean.fragmentDeletable}' == 'true'),
	   Boolean('#{fragmentListBeans[2].panelContextBean.fragmentDeletable}' == 'true'),
	];
	var draggableSettings = {
        revert: true
        , cursor:"move"
        , scroll: false
        , helper: "clone"
        , zIndex: 10000
    };
	
	$(".fragment-title").draggable(draggableSettings);
	
	$(".each-tag").draggable(draggableSettings);
    
    var effectClassOnDrop = "ui-state-active";
    
    // D&D for relating fragments
    var droppable = newBaseDroppable(effectClassOnDrop);
    droppable.drop = function(event, ui) {
        var from = ui.draggable;
        var to = $(event.target);
        to.removeClass(effectClassOnDrop);
        if (from.hasClass("fragment-title")) {
            var fromId = from.attr("_fid");
            var toId = to.find(".fragment-title").attr("_fid");
            if (fromId != toId) {
                relateFragments([ {name:"from", value:fromId}, {name:"to", value:toId} ]);
            }
        }
        else if (from.hasClass("each-tag")) {
            fetchFragmentsByTag(from, to);
        }
    };
    $(".each-fragment-container").droppable(droppable);
    
    // D&D for fetching fragments by a perticular tag
    droppable = newBaseDroppable(effectClassOnDrop);
    droppable.drop = function(event, ui) {
        var from = ui.draggable;
        var to = $(event.target);
        to.removeClass(effectClassOnDrop);
        if (from.hasClass("each-tag")) {
            fetchFragmentsByTag(from, to);
        }
    };    
    $('[id^="fragment-group-form\\:fragment-panel-toolbar-"]').droppable(droppable);
    
    // D&D for trashing/deleting a fragment
    droppable = newBaseDroppable(effectClassOnDrop);
    droppable.drop = function(event, ui) {
        var from = ui.draggable;
        var to = $(event.target);
        to.removeClass(effectClassOnDrop);
        if (from.hasClass("fragment-title")) {
	        var panelId = findPanel(from);
	       	var deleting = fragmentDeletable[panelId];
        	var frgId = from.attr("_fid");
        	confirmTrashingFragments(frgId, deleting, false, null);
        }
        else if (from.hasClass("each-tag")) {
        	confirmTrashingTag(from.attr("_tid"), Boolean(from.attr("_frgCount") == 0));
        }
    };    
    $("#trashcan").droppable(droppable);

    // D&D for bookmarking a fragment
    droppable = newBaseDroppable(effectClassOnDrop);
    droppable.drop = function(event, ui) {
        var from = ui.draggable;
        var to = $(event.target);
        to.removeClass(effectClassOnDrop);
        if (from.hasClass("fragment-title")) {
        	var frgId = from.attr("_fid");
        	bookmarkFragment([ {name:"fragmentId", value:frgId} ]);
        }
    };    
    $("#bookmark-form\\:bookmark-panel").droppable(droppable);
}

function fetchFragmentsByTag(from, to) {
	var targetPanelId = findPanel(to);
    $("#fragment-group-form\\:id-placeholder-for-tag-palette-panel-radio").val(targetPanelId);
    $("#panel-toggler-" + targetPanelId).prop("checked", true);
    $("#panel-activation-buttons").buttonset("refresh");
    filterByTag([ {name:"tagId", value:from.attr("_tid")} ]);
}

function newBaseDroppable(effectClassOnDrop) {
	var output = {
		over: function(event, ui) {
			var from = ui.draggable;
			if (from.attr("id") == "editor-frame") {
				return;
			}
            var to = $(event.target);
            to.addClass(effectClassOnDrop);
        },
        out: function(event, ui) {
            var to = $(event.target);
            to.removeClass(effectClassOnDrop);
        },
        deactivate: function(event, ui) {
            var to = $(event.target);
            to.removeClass(effectClassOnDrop);
        },
	};
	return output;
}

function findPanel(obj) {
	var panelParent = obj.parents('[id^="fragment-panel-"]');
	if (panelParent) {
		return panelParent.attr("_pid");
	}
	return -1;
}

function populateFragmentOverlay(data) {
	$("#fragment-overlay").lightbox_me({
        centered:false
        , showOverlay:false
        , lightboxSpeed:"fast"
        , closeSelector:"#fragment-overlay-close-button"
        , closeEsc:true
        , modalCSS:{ position:"fixed", bottom: '2%', right: '2%' }
    });
	
	$("#fragment-overlay-content").html(data);
	
	$("#fragment-overlay-content .fragment-content").each(function(){
        var $this = $(this);
        var content = $this.text();
        $this.html(parseMarkdown(content));
    });
}

function showSortOptionDialog(panelId) {
	PF('sortOptionDlg' + panelId).show();
}

function fragmentCheckBoxesAreChecked(panelId) {
	var fragmentCount = $("#fragment-panel-" + panelId + " .each-fragment-container").length;
    if (fragmentCount > 0) {
        for (var j=0; j<fragmentCount; ++j) {
            var cb = PF("fragmentCheckboxSlave" + panelId + "_" + j);
            if (cb.isChecked()) {
            	return true;
            }
        }
    }
    return false;
}

function showError(message) {
	$('#fragment-group-form\\:error-dlg-msg').text(message);
	PF("errorMsgDlg").show();
}

function confirmTrashingFragments(frgId, deleting, bulk, panelId) {
	if (bulk) {
        if (fragmentCheckBoxesAreChecked(panelId) == false) {
            showError("#{msg['no_fragment_is_selected']}");
            return;
        }
    }
	
	var message = deleting ? "#{msg['confirm_deleting_fragments']}" : "#{msg['confirm_trashing_fragments']}";
	$('#fragment-group-form\\:confirm-dlg-msg').text(message);
    
    var yesBtn = $('[id^="fragment-group-form\\:confirm-dlg-yes-btn-"]');
    yesBtn.hide();
    
    if (deleting) {
        if (bulk) {
        	yesBtn.eq(3).show();
        }
        else {
        	yesBtn.eq(1).show();
        }
    }
    else {
        if (bulk) {
        	yesBtn.eq(2).show();
        }
        else {
        	yesBtn.eq(0).show();
        }
    }
    
    PF('singletonConfirmDlg').show();
    
    if (bulk) {
	    $("#fragment-group-form\\:id-placeholder-for-panel").val(panelId);
    }
    else {
	    $("#fragment-group-form\\:id-placeholder-for-fragment").val(frgId);
    }
}

function confirmTrashingTag(tagId, deleting) {
	var message = deleting ? "#{msg['confirm_deleting_tag']}" : "#{msg['confirm_trashing_fragments_with_tag']}";
    $('#fragment-group-form\\:confirm-dlg-msg').text(message);
    
    var yesBtn = $('[id^="fragment-group-form\\:confirm-dlg-yes-btn-"]');
    yesBtn.hide();
    
    if (deleting) {
    	yesBtn.eq(5).show();
    }
    else {
    	yesBtn.eq(4).show();
    }
    
    PF('singletonConfirmDlg').show();
    
    $("#fragment-group-form\\:id-placeholder-for-trashed-tag").val(tagId);
}

function confirmUnbookmarkingFragment(frgId) {
	var message = "#{msg['confirm_unbookmarking_fragment']}";
    $('#fragment-group-form\\:confirm-dlg-msg').text(message);
	$('[id^="fragment-group-form\\:confirm-dlg-yes-btn-"]').hide();
	$("#fragment-group-form\\:confirm-dlg-yes-btn-unbookmark-fragment").show();
	PF('singletonConfirmDlg').show();
	$("#fragment-group-form\\:id-placeholder-for-fragment").val(frgId);
}

function confirmUnrelateFragments(frgId0, frgId1) {
	var message = "#{msg['confirm_unrelating_fragments']}";
    $('#fragment-group-form\\:confirm-dlg-msg').text(message);
    $('[id^="fragment-group-form\\:confirm-dlg-yes-btn-"]').hide();
    $("#fragment-group-form\\:confirm-dlg-yes-btn-unrelate-fragments").show();
    PF('singletonConfirmDlg').show();
    $("#fragment-group-form\\:id-placeholder-for-fragment0").val(frgId0);
    $("#fragment-group-form\\:id-placeholder-for-fragment1").val(frgId1);
}

//]]>
</script>
</ui:define>

<ui:define name="header">
    <ui:include src="header.xhtml" />
</ui:define>

<ui:define name="content">

<div style='display:none' >
    <div id='fragment-overlay' >
        <div id="fragment-overlay-title-bar" >
            <div style="float: right;">
                <a id="fragment-overlay-close-button" href="#" title="#{msg['label_close']}">
                    <span class="fa fa-close fa-2x warning-color" ></span>
                </a>
            </div>
        </div>
        <div id="fragment-overlay-content"></div>
    </div>
</div>

<h:form id="fragment-group-form">
<!--     <p:log id="log" /> -->
    <p:growl id="growl" showDetail="true" sticky="false" life="10000" />
    <p:messages id="messages" globalOnly="true" showDetail="true" closable="true" />
    <!-- [DEV] -->
    <p:messages id="development-messages" globalOnly="false" showDetail="true" closable="true" />
    
    <h:inputHidden id="id-placeholder-for-fragment" value="#{paramFragmentBean.fragment.id}" />
    <h:inputHidden id="id-placeholder-for-trashed-tag" value="#{paramTagBean.tag.id}" />
    <h:inputHidden id="id-placeholder-for-panel" value="#{customParams.panelId}" />
    <h:inputHidden id="id-placeholder-for-tag-palette-panel-radio" value="#{customParams.panelIdForTagPalette}" />
    <h:inputHidden id="id-placeholder-for-search" value="#{customParams.panelIdForSearch}" />
    <h:inputHidden id="id-placeholder-for-fragment0" value="#{customParams.fragmentId0}" />
    <h:inputHidden id="id-placeholder-for-fragment1" value="#{customParams.fragmentId1}" />
    
    <p:confirmDialog header="#{msg['label_error']}" severity="alert" closeOnEscape="true" widgetVar="errorMsgDlg" showEffect="fade" hideEffect="explode">
        <f:facet name="message">
            <h:outputText id="error-dlg-msg" styleClass="warning-color" value="&nbsp;"/>
        </f:facet>
        <p:commandButton value="#{msg['label_ok']}" icon="ui-icon-check" onclick="PF('errorMsgDlg').hide();" type="button" />
    </p:confirmDialog>
    
    <p:confirmDialog header="#{msg['are_you_sure']}" width="450px" severity="alert" closeOnEscape="true" widgetVar="singletonConfirmDlg" showEffect="fade" hideEffect="fade">
        <f:facet name="message">
            <h:outputText id="confirm-dlg-msg" value="&nbsp;" />
        </f:facet>

        <p:commandButton id="confirm-dlg-yes-btn-trash-fragment" value="#{msg['label_yes']}" action="trash-fragment" oncomplete="PF('singletonConfirmDlg').hide()"/>
        <p:commandButton id="confirm-dlg-yes-btn-delete-fragment" value="#{msg['label_yes']}" action="delete-fragment" oncomplete="PF('singletonConfirmDlg').hide()"/>
        <p:commandButton id="confirm-dlg-yes-btn-trash-fragments" value="#{msg['label_yes']}" action="trash-fragments" oncomplete="PF('singletonConfirmDlg').hide()" />
        <p:commandButton id="confirm-dlg-yes-btn-delete-fragments" value="#{msg['label_yes']}" action="delete-fragments" oncomplete="PF('singletonConfirmDlg').hide()" />
        <p:commandButton id="confirm-dlg-yes-btn-trash-tag" value="#{msg['label_yes']}" action="trash-tag" oncomplete="PF('singletonConfirmDlg').hide()"/>
        <p:commandButton id="confirm-dlg-yes-btn-delete-tag" value="#{msg['label_yes']}" action="delete-tag" oncomplete="PF('singletonConfirmDlg').hide()"/>
        <p:commandButton id="confirm-dlg-yes-btn-unbookmark-fragment" value="#{msg['label_yes']}" action="unbookmark-fragment" oncomplete="PF('singletonConfirmDlg').hide()"/>
        <p:commandButton id="confirm-dlg-yes-btn-unrelate-fragments" value="#{msg['label_yes']}" action="unrelate-fragments" oncomplete="PF('singletonConfirmDlg').hide()"/>

        <p:commandButton value="#{msg['label_no']}" onclick="PF('singletonConfirmDlg').hide();" type="button" />
    </p:confirmDialog>
    
    <p:remoteCommand name="relateFragments" action="relate-fragments" />
    <p:remoteCommand name="filterByTag" action="filter-by-tag" />
    <p:remoteCommand name="bookmarkFragment" action="bookmark-fragment" />
    
    <div id="fragment-group">
        <c:set var="panelId" value="0" />
	    <div id="fragment-panel-#{panelId}" _pid="#{panelId}">
            <ui:include src="each-fragment-panel.xhtml"></ui:include>
	    </div>
	    
	    <c:set var="panelId" value="1" />
        <div id="fragment-panel-#{panelId}" _pid="#{panelId}">
            <ui:include src="each-fragment-panel.xhtml"></ui:include>
        </div>
        
        <c:set var="panelId" value="2" />
        <div id="fragment-panel-#{panelId}" _pid="#{panelId}">
            <ui:include src="each-fragment-panel.xhtml"></ui:include>
        </div>
    </div>
</h:form>

</ui:define> <!-- end of content -->

<ui:define name="sidebar">
    <ui:include src="sidebar.xhtml"></ui:include>
</ui:define>

<ui:define name="footer"></ui:define>

</ui:composition>
