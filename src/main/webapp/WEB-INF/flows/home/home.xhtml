<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:c="http://java.sun.com/jsp/jstl/core" 
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:p="http://primefaces.org/ui"
	template="/WEB-INF/layouts/standard.xhtml">
                
<ui:define name="entry-point-scripts">
<script>
//<![CDATA[
$(document).ready(function() {
	setupParser();
	
	translateFragments();
    
    setupFragmentOverlay();
    
    setupFragmentCheckboxes();
    
    setupDragAndDrop();
    
    setContextMenuForFragments();
    
    makeObjectsInsertableToTextArea();
    
    setTimeout(function() {
    	// timeout for message display if any
    	$(".ui-messages-close").trigger("click");
    }, 15000);
}); // end of $(document).ready()

function setupParser() {
	// prepare *Marked* (a Markdown parser) library; see https://github.com/chjj/marked
	marked.setOptions({
		renderer: new marked.Renderer(),
		gfm: true,
		tables: true,
		breaks: true,
		pedantic: false,
		sanitize: true,
		smartLists: true,
		smartypants: false,
	});
}

function translateFragments() {
	// apply Civilizer's custom markup rules to fragment titles;
    $(".fragment-title").each(function() {
    	var $this = $(this);
    	$this.html(translateCustomMarkupRules($this.html()));
    });
    
    // translate Markdown formatted fragment contents into HTML format
    $(".fragment-content").each(function() {
    	var $this = $(this);
    	$this.html(translateFragmentContent($this.text()));
   	});
}

function populateFragmentOverlay(data) {
	// show the fragment overlay as a popup
	$("#fragment-overlay").lightbox_me({
        centered:false
        , showOverlay:false
        , lightboxSpeed:"fast"
        , closeSelector:"#fragment-overlay-close-button"
        , closeEsc:true
        , modalCSS:{ position:"fixed", bottom: '2%', right: '2%' }
    });
	
	$("#fragment-overlay-title").text("");
	$("#fragment-overlay-content").html(data);
	
	// translate Markdown formatted fragment contents into HTML format
	$("#fragment-overlay-content .fragment-content").each(function(){
        var $this = $(this);
        var content = $this.text();
		$this.html(translateFragmentContent($this.text()));
    });
	
	// translate file box elements into HTML links
	processFileClasses();
	
	// make titles on the overlay window also draggable/droppable (maybe too overhead?)
	setupDraggableForFragmentTitle();
	setupDndForRelatingFragments();
}

function setupFragmentOverlay() {
	function triggerFragmentOverlay(event) {
    	var href=$(this).attr('href');
        $.get(href, "", populateFragmentOverlay);
        
        event.preventDefault();
        
        return false; // stop the link
    }
    
    $("#fragment-group").find(".-cvz-frgm").on("click", triggerFragmentOverlay);
    $("#bookmark-form\\:bookmark-panel").find(".-cvz-frgm").on("click", triggerFragmentOverlay);
    
    $("#fragment-overlay").draggable({
    	handle:"#fragment-overlay-title-bar",
        cursor:"move",
    });
}

function setupFragmentCheckboxes() {
	function generateClickHandler(panelId) {
    	var fragmentCount = $("#fragment-panel-" + panelId + " .each-fragment-container").length;
        if (fragmentCount > 0) {
            var fragmentCheckboxSlaves = [];    
            
            for (var j=0; j<fragmentCount; ++j) {
                var cb = PF("fragmentCheckboxSlave" + panelId + "_" + j);
                fragmentCheckboxSlaves.push(cb);
            }
        
            var fragmentCheckboxMaster = PF("fragmentCheckboxMaster" + panelId);
            
            // Align the master checkbox with its slaves in horizontal position
            fragmentCheckboxMaster.jq.offset({ left:fragmentCheckboxSlaves[0].jq.offset().left });
            
            return function (e) {
                if (fragmentCheckboxMaster.isChecked()) {
                    for (var i=0; i<fragmentCount; ++i) {
                        fragmentCheckboxSlaves[i].check();
                    }
                }
                else {
                    for (var i=0; i<fragmentCount; ++i) {
                        fragmentCheckboxSlaves[i].uncheck();
                    }
                }
            }
        }
    }
    
    var fragmentCheckboxMaster;
    var panelId;
    
    panelId = 0;
    fragmentCheckboxMaster = PF("fragmentCheckboxMaster" + panelId)
    if (fragmentCheckboxMaster) {
    	fragmentCheckboxMaster.jq.click(generateClickHandler(panelId));
    }
    panelId = 1;
    fragmentCheckboxMaster = PF("fragmentCheckboxMaster" + panelId)
    if (fragmentCheckboxMaster) {
    	fragmentCheckboxMaster.jq.click(generateClickHandler(panelId));
    }
    panelId = 2;
    fragmentCheckboxMaster = PF("fragmentCheckboxMaster" + panelId)
    if (fragmentCheckboxMaster) {
    	fragmentCheckboxMaster.jq.click(generateClickHandler(panelId));
    }
    
    // Attach a tooltip message to a checkbox on each fragment panel menu
    for (var i=0; i<3; ++i) {
    	var cb = $("#fragment-group-form\\:checkbox-for-all-fragments-" + i);
    	if (cb.length > 0) {
    		cb[0].title = "#{msg['label_check_uncheck_all']}";
    	}
    }
}

function makeObjectsInsertableToTextArea() {
	// [NOTE] original source code can be found at:
    // http://skfox.com/2008/11/26/jquery-example-inserting-text-with-drag-n-drop/
    $.fn.insertAtCaret = function (myValue) {
		return this.each(function(){
			//IE support
			if (document.selection) {
				this.focus();
				sel = document.selection.createRange();
				sel.text = myValue;
				this.focus();
			}
			//MOZILLA / NETSCAPE support
			else if (this.selectionStart || this.selectionStart == '0') {
				var startPos = this.selectionStart;
				var endPos = this.selectionEnd;
				var scrollTop = this.scrollTop;
				this.value = this.value.substring(0, startPos)+ myValue+ this.value.substring(endPos,this.value.length);
				this.focus();
				this.selectionStart = startPos + myValue.length;
				this.selectionEnd = startPos + myValue.length;
				this.scrollTop = scrollTop;
			}
			else {
				this.value += myValue;
				this.focus();
			}
		});
    };
}

function translateCustomMarkupRules(html) {
	// format  =>   {{[keyword] ... text ... }}
	return html.replace(/\{\{\[(.+?)\](.*?)\}\}/g, function(match, pos, originalText) {
        return "<span class='-cvz-" + RegExp.$1 + "'>" + RegExp.$2 + "</span>";
    });
}

function translateFragmentContent(content) {
    // translate Markdown text into HTML;
    // [NOTE] HTML code would be sanitized at this time;
	var outputHtml = parseMarkdown(content);
	
	// take care of custom style rules
	return translateCustomMarkupRules(outputHtml);
}

// [NOTE] this is a default basic setting for all jQuery UI Draggable objects;
// It should remain as IMMUTABLE
var baseDraggableSettings = {
    cursor:"move",
    cursorAt:{ left:20, top:20 },
    scroll: false,
    helper: "clone",
    zIndex: 10000,
    containment: "document",
};

function setupDragAndDrop() {
	setupDraggableForFragmentTitle();
	setupDraggableForTags();
	setupDraggableForFiles();
	
	setupDndForRelatingFragments();
	setupDndForFragmentFetchByTagDrop();
	setupDndForBookmarking();
	setupDndForTrashing();
	setupDndForEmbeddingFile();
}

function setupDraggableForFragmentTitle() {
	$(".fragment-title").draggable(baseDraggableSettings);
}

function setupDraggableForTags() {
	var tagPalettePanel = $("#tag-palette-panel");
	var overflowOption = tagPalettePanel.css("overflow");
	$("#tag-palette-panel .each-tag").draggable(baseDraggableSettings)
	.on("dragstart", function(event, ui) {
		// [NOTE] the helper object disappears at the outside of the panel unless doing this
		tagPalettePanel.css({overflow:"initial"});
	})
	.on("dragstop", function(event, ui) {
		tagPalettePanel.css({overflow:overflowOption});
	});
}

function setupDraggableForFiles() {
	var fileBoxPanel = $("#file-box-form\\:file-box-panel");
	var overflowOption = fileBoxPanel.css("overflow");
	$(".fb-file").draggable(baseDraggableSettings)
	.on("dragstart", function(event, ui) {
		fileBoxPanel.css({overflow:"initial"});
	})
	.on("dragstop", function(event, ui) {
		// [NOTE] the overflow style should be identical between the tag palette and file box
		fileBoxPanel.css({overflow:overflowOption});
	});
}

function setupDndForRelatingFragments() {
	var droppable = newBaseDroppable(["fragment-title"]);
    droppable.drop = function(event, ui) {
        var from = ui.draggable;
        var to = $(event.target);
        if (from.hasClass("fragment-title")) {
            var fromId = from.attr("_fid");
            var toId = to.find(".fragment-title").attr("_fid");
            if (fromId != toId) {
                relateFragments([ {name:"from", value:fromId}, {name:"to", value:toId} ]);
            }
        }
    };
    $(".fragment-header").droppable(droppable);
}

function setupDndForFragmentFetchByTagDrop() {
	var droppable = newBaseDroppable(["each-tag"]);
    droppable.drop = function(event, ui) {
        var from = ui.draggable;
        var to = $(event.target);
        if (from.hasClass("each-tag")) {
            fetchFragmentsByTag(from, to);
        }
    };    
    $('[id^="fragment-group-form\\:fragment-panel-toolbar-"]').droppable(droppable);
    $("#panel-activation-buttons label").droppable(droppable);
}

function setupDndForBookmarking() {
	var droppable = newBaseDroppable(["fragment-title"]);
    droppable.drop = function(event, ui) {
        var from = ui.draggable;
        var to = $(event.target);
        if (from.hasClass("fragment-title")) {
        	var frgId = from.attr("_fid");
        	bookmarkFragment([ {name:"fragmentId", value:frgId} ]);
        }
    };    
    $("#bookmark-form\\:bookmark-panel").droppable(droppable);
}

function setupDndForTrashing() {
	var fragmentDeletable = [
   	   Boolean('#{fragmentListBeans[0].panelContextBean.fragmentDeletable}' == 'true'),
   	   Boolean('#{fragmentListBeans[1].panelContextBean.fragmentDeletable}' == 'true'),
   	   Boolean('#{fragmentListBeans[2].panelContextBean.fragmentDeletable}' == 'true'),
   	];
	
	var droppable = newBaseDroppable(["fragment-title", "each-tag"]);
    droppable.drop = function(event, ui) {
        var from = ui.draggable;
        var to = $(event.target);
        if (from.hasClass("fragment-title")) {
	        var panelId = findPanel(from);
	       	var deleting = fragmentDeletable[panelId];
        	var frgId = from.attr("_fid");
        	confirmTrashingFragments(frgId, deleting, false, null);
        }
        else if (from.hasClass("each-tag")) {
        	confirmTrashingTag(from.attr("_tid"), Boolean(from.attr("_frgCount") == 0));
        }
    };    
    $("#trashcan").droppable(droppable);
}

function setupDndForEmbeddingFile() {
	var droppable = newBaseDroppable("", ["fb-file"]);
    droppable.drop = function(event, ui) {
        var from = ui.draggable;
        var to = $(event.target);
        if (from.hasClass("fb-file")) {
        	var encoded = "{{[file]" + from.attr("_fp") + "}}";
        	$(this).insertAtCaret(encoded);
        }
    };    
    $("#fragment-content-editor").droppable(droppable);
}

function newBaseDroppable(acceptableClasses) {
	var weakFocus = "ui-weak-focus";
	var strongFocus = "ui-strong-focus";
	var output = {
		over: function(event, ui) {
			var from = ui.draggable;
            var to = $(event.target);
			if (hasAnyClass(from, acceptableClasses)) {
	            to.addClass(strongFocus);
	            to.removeClass(weakFocus);
			}
        },
        out: function(event, ui) {
        	var from = ui.draggable;
            var to = $(event.target);
            if (hasAnyClass(from, acceptableClasses)) {
	            to.removeClass(strongFocus);
	            to.addClass(weakFocus);
            }
        },
        activate: function(event, ui) {
        	var from = ui.draggable;
            var to = $(event.target);
            if (hasAnyClass(from, acceptableClasses)) {
	            to.addClass(weakFocus);
			}
        },
        deactivate: function(event, ui) {
            var to = $(event.target);
            to.removeClass(strongFocus);
            to.removeClass(weakFocus);
        },
	};
	return output;
}

function hasAnyClass(obj, classes) {
	for (var i=0; i<classes.length; ++i) {
		if (obj.hasClass(classes[i])) {
			return true;
		}
	}
	return false;
}

function findPanel(obj) {
	if (!obj) {
		return -1;
	}
	var pid = obj.attr("_pid");
	if (pid) {
		return pid;
	}
	var panelParent = obj.parents('[id^="fragment-panel-"]');
	if (panelParent.length > 0) {
		return panelParent.attr("_pid");
	}
	return -1;
}

function fetchFragmentsByTag(from, to) {
	var targetPanelId = findPanel(to);
	if (targetPanelId < 0) {
		if ($("#panel-toggler-1").prop("checked") == false) targetPanelId = 1;
		else if ($("#panel-toggler-2").prop("checked") == false) targetPanelId = 2;
		else targetPanelId = 0;
	}
    $("#fragment-group-form\\:id-placeholder-for-panel").val(targetPanelId);
    $("#panel-toggler-" + targetPanelId).prop("checked", true);
    $("#panel-activation-buttons").buttonset("refresh");
    filterByTag([ {name:"tagId", value:from.attr("_tid")}, {name:"panelId", value:targetPanelId} ]);
}

function showSortOptionDialog(panelId) {
	PF("sortOptionDlg" + panelId).show();
}

function fragmentCheckBoxesAreChecked(panelId) {
	var fragmentCount = $("#fragment-panel-" + panelId + " .each-fragment-container").length;
    if (fragmentCount > 0) {
        for (var j=0; j<fragmentCount; ++j) {
            var cb = PF("fragmentCheckboxSlave" + panelId + "_" + j);
            if (cb.isChecked()) {
            	return true;
            }
        }
    }
    return false;
}

function showError(message) {
	$('#fragment-group-form\\:error-msg').text(message);
	PF("errorMsgDlg").show();
}

function showConfirmDlg(message) {
	var dlg = PF("confirmDlg");
    dlg.show();
    dlg.jq.find(".ui-confirm-dialog-message").text(message);
}

function confirmTrashingFragments(frgId, deleting, bulk, panelId) {
	if (bulk) {
        if (fragmentCheckBoxesAreChecked(panelId) == false) {
            showError("#{msg['no_item_is_selected']}");
            return;
        }
    }
	
    var op = deleting ? "delete" : "trash";
    var s = bulk ? "s" : "";
	$("#fragment-group-form\\:ok").click(function() {
		document.forms["fragment-group-form"]["fragment-group-form:ok-"+ op +"-fragment" + s].click();
	});
	
	showConfirmDlg(deleting ? "#{msg['confirm_deleting']}" : "#{msg['confirm_trashing']}");
    
    if (bulk) {
	    $("#fragment-group-form\\:id-placeholder-for-panel").val(panelId);
    }
    else {
	    $("#fragment-group-form\\:id-placeholder-for-fragment").val(frgId);
    }
}

function confirmTrashingTag(tagId, deleting) {
	var op = deleting ? "delete" : "trash";	
	$("#fragment-group-form\\:ok").click(function() {
		document.forms["fragment-group-form"]["fragment-group-form:ok-"+ op +"-tag"].click();
	});
    showConfirmDlg(deleting ? "#{msg['confirm_deleting']}" : "#{msg['confirm_trashing']}");
    $("#fragment-group-form\\:id-placeholder-for-trashed-tag").val(tagId);
}

function confirmTrashingTagFromCtxtMenu() {
	var menu = $("#tag-context-menu");
	var target = menu.data("target-tag");
	var tagId = target.attr("_tid");
	var deleting = target.attr("_frgCount") == 0;
	confirmTrashingTag(tagId, deleting);
}

function confirmUnrelatingFragments(frgId0, frgId1) {
	$("#fragment-group-form\\:ok").click(function() {
		document.forms["fragment-group-form"]["fragment-group-form:ok-unrelate-fragments"].click();
	});
    showConfirmDlg("#{msg['confirm_unrelating']}");
    $("#fragment-group-form\\:id-placeholder-for-fragment0").val(frgId0);
    $("#fragment-group-form\\:id-placeholder-for-fragment1").val(frgId1);
}

function confirmDeletingFile() {
    $("#fragment-group-form\\:ok").click(function() {
		document.forms["fragment-group-form"]["fragment-group-form:ok-delete-files"].click();
	});

    showConfirmDlg("#{msg['confirm_deleting']}");
    
    var menu = $("#file-context-menu");
	var target = menu.data("target-file");
	var fileId = target.attr("_id");
    $("#fragment-group-form\\:id-placeholder-for-file").val(fileId);
}

function setContextMenuForFragments() {
	var menu = $("#frg-context-menu");
	
	$(".fragment-header").bind("contextmenu", function(event) {
    	var target = $(event.target);
    	if (target.hasClass("fragment-header")) {
	    	menu.css({ left:event.pageX, top:event.pageY }).show();
	    	menu.data("target-frg", target);
	    	if (target.attr("_deletable") === "true") {
	    		menu.find("#fragment-group-form\\:bookmark").hide();
	    		menu.find("#fragment-group-form\\:trash").hide();
	    		menu.find("#fragment-group-form\\:delete").show();
	    	}
	    	else {
	    		menu.find("#fragment-group-form\\:bookmark").show();
	    		menu.find("#fragment-group-form\\:trash").show();
	    		menu.find("#fragment-group-form\\:delete").hide();
	    	}
	    	event.preventDefault();
    	}
	});
	
	$(document).bind("click", function(event) {
    	menu.hide();
    });
}

function bookmarkFragmentFromCtxtMenu() {
	var menu = $("#frg-context-menu");
	var target = menu.data("target-frg");
	var frgId = target.attr("_fid");
	bookmarkFragment([ {name:"fragmentId", value:frgId} ]);
}

function trashFragmentFromCtxtMenu(deleting) {
	var menu = $("#frg-context-menu");
	var target = menu.data("target-frg");
	var frgId = target.attr("_fid");
	var panelId = findPanel(target);
	
	confirmTrashingFragments(frgId, deleting, false, panelId);
}

function showSearchDialog(panelId) {
	var dlg = PF("searchDlg");
	dlg.show();
	$("#fragment-group-form\\:go-search").click(function() {
		searchFragments([{name:'panelId',value:panelId}]);
	});
	$("#fragment-group-form\\:search-panel\\:quick-search-input").keyup(function(event) {
		console.log(event.keyCode);
		if (event.keyCode == 13) {
			searchFragments([{name:'panelId',value:panelId}]);
		}
	});
}

//]]>
</script>
</ui:define>

<ui:define name="header">
    <ui:include src="header.xhtml"/>
</ui:define>

<ui:define name="content">

<div style='display:none' >
    <div id='fragment-overlay' >
        <div id="fragment-overlay-title-bar" >
        	<span id="fragment-overlay-title"></span>
            <div style="float: right;">
                <a id="fragment-overlay-close-button" href="#" title="#{msg['label_close']}">
                    <span class="fa fa-close fa-2x warning-color" ></span>
                </a>
            </div>
        </div>
        <div id="fragment-overlay-content"></div>
    </div>
</div>

<h:form id="fragment-group-form">
<!--     <p:log id="log"/> -->
<!--     <p:growl id="growl" showDetail="true" sticky="false" life="10000"/> -->
    <p:messages id="messages" globalOnly="true" showDetail="true" closable="true"/>
    <c:if test="#{systemProperties['civilizer.dev']}">
	    <!-- [DEV] -->
	    <p:messages id="development-messages" globalOnly="false" showDetail="true" closable="true"/>
    </c:if>
    
    <h:inputHidden id="id-placeholder-for-fragment" value="#{paramFragmentBean.fragment.id}"/>
    <h:inputHidden id="id-placeholder-for-trashed-tag" value="#{paramTagBean.tag.id}"/>
    <h:inputHidden id="id-placeholder-for-panel" value="#{customParams.panelId}"/>
    <h:inputHidden id="id-placeholder-for-search" value="#{searchContextBean.panelId}"/>
    <h:inputHidden id="id-placeholder-for-fragment0" value="#{customParams.fragmentId0}"/>
    <h:inputHidden id="id-placeholder-for-fragment1" value="#{customParams.fragmentId1}"/>
    <h:inputHidden id="id-placeholder-for-file" value="#{fileListBean.srcNodeId}"/>
    
    <p:confirmDialog header="#{msg['label_error']}" severity="alert" closeOnEscape="true" widgetVar="errorMsgDlg" showEffect="fade" hideEffect="explode">
        <f:facet name="message">
            <h:outputText id="error-msg" styleClass="warning-color" value="&nbsp;"/>
        </f:facet>
        <p:commandButton value="#{msg['label_ok']}" onclick="PF('errorMsgDlg').hide();" icon="ui-icon-check"/>
    </p:confirmDialog>
    
    <p:confirmDialog header="#{msg['are_you_sure']}" width="450px" severity="alert" closeOnEscape="true" widgetVar="confirmDlg" showEffect="fade" hideEffect="fade">
		<div style="display:none">
	        <p:commandButton id="ok-trash-fragment" action="trash-fragment"/>
	        <p:commandButton id="ok-delete-fragment" action="delete-fragment"/>
	        <p:commandButton id="ok-trash-fragments" action="trash-fragments"/>
	        <p:commandButton id="ok-delete-fragments" action="delete-fragments"/>
	        <p:commandButton id="ok-trash-tag" action="trash-tag"/>
	        <p:commandButton id="ok-delete-tag" action="delete-tag"/>
	        <p:commandButton id="ok-unbookmark-fragment" action="unbookmark-fragment"/>
	        <p:commandButton id="ok-unrelate-fragments" action="unrelate-fragments"/>
	        <p:commandButton id="ok-delete-files" action="delete-file"/>
		</div>
        <p:commandButton id="ok" value="#{msg['label_ok']}" icon="ui-icon-check"/>
    </p:confirmDialog>
    
    <p:dialog header="#{msg['label_search']}" width="500px" modal="true" closeOnEscape="true" showEffect="fade" widgetVar="searchDlg" position="center" draggable="true" resizable="false">
    	<p:accordionPanel id="search-panel">
	        <p:tab title="#{msg['label_quick_search']}">
	            <p:inputText id="quick-search-input" style="width:80%" value="#{searchContextBean.quickSearchPhrase}"/>
	        </p:tab>
	        <p:tab title="#{msg['label_normal_search']}">
	            <div>
		            <label class="fa fa-tag"> Tag </label>
		            <p:inputText id="tag-keywords" style="width:50%" value="#{searchContextBean.tagKeywords}"/>
		            <p:selectBooleanCheckbox value="#{searchContextBean.anyTag}" itemLabel="#{msg['label_any']}"/>
	            </div>
	            <div>
		            <label class="fa fa-header"> Title </label>
		            <p:inputText id="title-keywords" style="width:50%" value="#{searchContextBean.titleKeywords}"/>
		            <p:selectBooleanCheckbox value="#{searchContextBean.anyTitle}" itemLabel="#{msg['label_any']}"/>
	            </div>
	            <div>
		            <label class="fa fa-file-text-o"> Content </label>
		            <p:inputText id="content-keywords" style="width:50%" value="#{searchContextBean.contentKeywords}"/>
		            <p:selectBooleanCheckbox value="#{searchContextBean.anyContent}" itemLabel="#{msg['label_any']}"/>
	            </div>
	            <div>
		            <label class="fa fa-sort-numeric-asc"> ID </label>
		            <p:inputText id="id-keywords" style="width:50%" value="#{searchContextBean.idKeywords}"/>
	            </div>
	        </p:tab>
	    </p:accordionPanel>
	    <p:commandButton id="go-search" value="#{msg['label_search']}" icon="ui-icon-check"/>
    </p:dialog>
    
    <p:remoteCommand name="relateFragments" action="relate-fragments"/>
    <p:remoteCommand name="filterByTag" action="filter-by-tag" async="true"/>
    <p:remoteCommand name="bookmarkFragment" action="bookmark-fragment"/>
    <p:remoteCommand name="searchFragments" action="search-fragments" />
    
    <div id="frg-context-menu" style="display:none; z-index:5000; position:absolute;">
	    <p:menu>
            <p:menuitem id="edit" styleClass="fa" onclick="openFragmentEditorForEdit(event)" value="&#xf040; #{msg['label_edit']}"/>
            <p:menuitem id="bookmark" styleClass="fa" onclick="bookmarkFragmentFromCtxtMenu()" value="&#xf02e; #{msg['label_bookmark']}"/>
            <p:menuitem id="trash" styleClass="fa" onclick="trashFragmentFromCtxtMenu(false)" value="&#xf1f8; #{msg['label_trash']}"/>
            <p:menuitem id="delete" styleClass="fa" onclick="trashFragmentFromCtxtMenu(true)" value="&#xf1f8; #{msg['label_delete']}"/>
	    </p:menu>
    </div>
    
    <div id="fragment-group">
        <c:set var="panelId" value="0"/>
	    <div id="fragment-panel-#{panelId}" _pid="#{panelId}">
            <ui:include src="each-fragment-panel.xhtml"></ui:include>
	    </div>
	    
	    <c:set var="panelId" value="1"/>
        <div id="fragment-panel-#{panelId}" _pid="#{panelId}">
            <ui:include src="each-fragment-panel.xhtml"></ui:include>
        </div>
        
        <c:set var="panelId" value="2"/>
        <div id="fragment-panel-#{panelId}" _pid="#{panelId}">
            <ui:include src="each-fragment-panel.xhtml"></ui:include>
        </div>
    </div>
</h:form>

</ui:define> <!-- end of content -->

<ui:define name="sidebar">
    <ui:include src="sidebar.xhtml"></ui:include>
</ui:define>

<ui:define name="footer"></ui:define>

</ui:composition>
